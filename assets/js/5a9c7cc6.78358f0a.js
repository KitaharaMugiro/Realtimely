"use strict";(self.webpackChunkrealtimely_doc=self.webpackChunkrealtimely_doc||[]).push([[87],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return h}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=l(r),h=a,m=p["".concat(u,".").concat(h)]||p[h]||d[h]||i;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6624:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={sidebar_position:4},u="useRealtimeSharedState",l={unversionedId:"api-guide/useRealtimeSharedState",id:"api-guide/useRealtimeSharedState",isDocsHomePage:!1,title:"useRealtimeSharedState",description:"This method can be used like React's useState to send the state change to the server and share the state with all users viewing the same URL.",source:"@site/docs/03_api-guide/04_useRealtimeSharedState.md",sourceDirName:"03_api-guide",slug:"/api-guide/useRealtimeSharedState",permalink:"/Realtimely/docs/api-guide/useRealtimeSharedState",editUrl:"https://github.com/KitaharaMugiro/Realtimely-Docs/docs/03_api-guide/04_useRealtimeSharedState.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"useRealtimeUserAction",permalink:"/Realtimely/docs/api-guide/useRealtimeUserAction"},next:{title:"Architecture",permalink:"/Realtimely/docs/how-it-works/architecture"}},c=[{value:"On first render",id:"on-first-render",children:[]},{value:"When value is updated",id:"when-value-is-updated",children:[]}],d={toc:c};function p(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"userealtimesharedstate"},"useRealtimeSharedState"),(0,i.kt)("p",null,"This method can be used like React's ",(0,i.kt)("inlineCode",{parentName:"p"},"useState")," to send the state change to the server and share the state with all users viewing the same URL."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'const [state, setState] = useRealtimeSharedState({color: "red", number:3}, "slideState") \n')),(0,i.kt)("p",null,"The first argument of ",(0,i.kt)("inlineCode",{parentName:"p"},"useRealtimeSharedState")," is the default value, and the second argument is the actionId.\nThe actionId can be any string, as long as it is unique within the same URL."),(0,i.kt)("p",null,"This method returns an array with one variable and one function as a pair.\nAs with ",(0,i.kt)("inlineCode",{parentName:"p"},"useState"),", the first return value stores the state, and the second is used to update the state."),(0,i.kt)("p",null,"The URL and actionId are paired and the value is sent to the server for management."),(0,i.kt)("h2",{id:"on-first-render"},"On first render"),(0,i.kt)("p",null,"Get the latest value from the server the first time it is rendered. If it cannot be obtained, the default value is used."),(0,i.kt)("h2",{id:"when-value-is-updated"},"When value is updated"),(0,i.kt)("p",null,"When there is an update, the latest value is delivered to all users viewing the same URL."))}p.isMDXComponent=!0}}]);