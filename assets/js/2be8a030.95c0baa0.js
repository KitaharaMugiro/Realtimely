"use strict";(self.webpackChunkrealtimely_doc=self.webpackChunkrealtimely_doc||[]).push([[436],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return p}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(r),p=o,f=m["".concat(u,".").concat(p)]||m[p]||d[p]||i;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function p(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5736:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],s={sidebar_position:1},u="useRealtimeCursor",l={unversionedId:"api-guide/useRealtimeCursor",id:"api-guide/useRealtimeCursor",isDocsHomePage:!1,title:"useRealtimeCursor",description:"What this method does is:",source:"@site/docs/03_api-guide/01_useRealtimeCursor.md",sourceDirName:"03_api-guide",slug:"/api-guide/useRealtimeCursor",permalink:"/Realtimely/docs/api-guide/useRealtimeCursor",editUrl:"https://github.com/KitaharaMugiro/Realtimely-Docs/docs/03_api-guide/01_useRealtimeCursor.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Realtime User Action",permalink:"/Realtimely/docs/getting-started/realtime_user_action"},next:{title:"useOnlineUsers",permalink:"/Realtimely/docs/api-guide/useOnlineUsers"}},c=[{value:"onMouseMove",id:"onmousemove",children:[]},{value:"renderCursors",id:"rendercursors",children:[]},{value:"delete time",id:"delete-time",children:[]}],d={toc:c};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"userealtimecursor"},"useRealtimeCursor"),(0,i.kt)("p",null,"What this method does is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Monitor mouse movement and save clientX and clinentY in state"),(0,i.kt)("li",{parentName:"ul"},"Send URL, clientX, clientY, user information (randomly assigned name, avatar, color) to the server at intervals of 500ms"),(0,i.kt)("li",{parentName:"ul"},"If the information of another user corresponding to the same URL is added on the server by WebSocket, it will be acquired."),(0,i.kt)("li",{parentName:"ul"},"Define a function that keeps other users together in a list and draws it on the screen")),(0,i.kt)("p",null,"This method returns two functions."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onMouseMove")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"renderCursors"))),(0,i.kt)("h2",{id:"onmousemove"},"onMouseMove"),(0,i.kt)("p",null,"This function is a function that handles mouse events.\nApply onMouseMove to the element close to the root that covers the full screen."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"<div onMouseMove={onMouseMove}>\n")),(0,i.kt)("h2",{id:"rendercursors"},"renderCursors"),(0,i.kt)("p",null,"It is a function that draws mouse position information and user information (randomly assigned names, avatars, colors) acquired in real time."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"return (\n  <div>\n    {renderCursors()}\n  </div>\n);\n")),(0,i.kt)("p",null,"You can put a function that creates a custom view of the cursor in the argument of ",(0,i.kt)("inlineCode",{parentName:"p"},"renderCursors"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const customView = (param: CustomCursorViewParameter) => {\n    return (<CursorEye userInfo={param.userInfo} />)\n}\n\nreturn (\n  <div>\n    {renderCursors(customView)}\n  </div>\n);\n")),(0,i.kt)("h2",{id:"delete-time"},"delete time"),(0,i.kt)("p",null,"When the user goes offline, no data is sent to the server.\nThe delete time assigned by the server is set for each data, and ",(0,i.kt)("inlineCode",{parentName:"p"},"useRealtimeCursor")," removes the data that exceeds the delete time.\nThe delete time is fixed at 10 seconds.\nIf you want to change this setting, see ",(0,i.kt)("a",{parentName:"p",href:"/docs/how-it-works/self-backend"},"Build your own backend"),"."))}m.isMDXComponent=!0}}]);